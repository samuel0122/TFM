package com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.dao

import android.database.sqlite.SQLiteConstraintException
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.SmallTest
import com.google.common.truth.Truth.assertThat
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.AppDatabase
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.BookEntity
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.PageEntity
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.BoxEntity
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Assert.assertThrows
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
@SmallTest
class PageDaoTest {
    private lateinit var database: AppDatabase
    private lateinit var bookDao: BookDao
    private lateinit var pageDao: PageDao
    private lateinit var boxDao: BoxDao

    private val existingBook = BookEntity(1, "ExistingBook1", "Existing Book 1", 0)

    private val existingPage1 = PageEntity(1, "ExistingPage1", false, 0, 1)
    private val existingPage2 = PageEntity(2, "ExistingPage2", false, 0, 1)
    private val existingPage3 = PageEntity(3, "ExistingPage3", false, 0, 1)

    private val newPage1 = PageEntity(1, "NewPage1", false, 0, 1)
    private val newPage2 = PageEntity(2, "NewPage2", false, 0, 1)
    private val newPage3 = PageEntity(3, "NewPage3", false, 0, 1)

    private val pageNoId = PageEntity(0, "NoIdPage", false, 0, 1)

    private val boxEntity = BoxEntity(0, 5, 5, 0, 0, 1)

    @Before
    fun setup() {
        database = Room.inMemoryDatabaseBuilder(
            ApplicationProvider.getApplicationContext(),
            AppDatabase::class.java
        ).allowMainThreadQueries().build()

        bookDao = database.bookDao()
        pageDao = database.pageDao()
        boxDao = database.boxDao()
    }

    @After
    fun teardown() {
        database.close()
    }


    ////////////////////////////////////////////////////////////////
    /// Insert Page test cases:
    ///  1. Insert on empty Dataset -> Trows Exception
    ///  2. Insert on non empty Dataset no collision -> Insert OK
    ///  3. Insert on non empty Dataset with collision -> Override
    ///  4. Insert on non empty Dataset with no ID Page -> Insert OK with autogenerated Key

    /**
     * 1. Insert on empty Dataset -> Trows Exception
     */
    @Test
    fun insertPage_whenDatabaseIsEmpty() = runTest {
        // Given: Empty database.
        val insertPage = newPage1

        // When: Insert a page -> exception.
        assertThrows(SQLiteConstraintException::class.java) {
            runBlocking{
                val insertResult = pageDao.insertPage(insertPage)
            }
        }

        // Then: Database remains empty.
        assertThat(pageDao.getAllPages()).isEmpty()
    }

    /**
     * 2. Insert on non empty Dataset no collision -> Insert OK
     */
    @Test
    fun insertPage_whenDatabaseHasElements_noCollisions() = runTest {
        // Given: Dataset with initial pages.
        val initialPages = listOf(existingPage1, existingPage2)
        val insertPage = newPage3
        val finalPages = initialPages.plusElement(insertPage)

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }


        // When: Insert the new page.
        val insertResult = pageDao.insertPage(insertPage)

        // Then: Database contains previous pages and new one.
        val allPages = pageDao.getAllPages()

        assertThat(insertResult).isEqualTo(insertPage.pageId)
        assertThat(allPages).hasSize(finalPages.size)
        assertThat(allPages).containsExactlyElementsIn(finalPages)
    }

    /**
     * 3. Insert on non empty Dataset with collision -> Override
     */
    @Test
    fun insertPage_whenDatabaseHasElements_withCollision() = runTest {
        // Given: Database with one element.
        val initialPage = existingPage1
        val insertPage = newPage1

        bookDao.insertBook(existingBook)
        pageDao.insertPage(initialPage)

        // When: Insert a page which ID already exists.
        val insertResult = pageDao.insertPage(insertPage)

        // Then: The previous page was replaced by the new one.
        val allPages = pageDao.getAllPages()

        assertThat(insertResult).isEqualTo(insertPage.pageId)
        assertThat(allPages).hasSize(1)
        assertThat(allPages).containsExactly(insertPage)
    }

    /**
     * 4. Insert on non empty Dataset with no ID Page -> Insert OK with autogenerated Key
     */
    @Test
    fun insertPage_noId_whenDatabaseHasElements() = runTest {
        // Given: Dataset with elements and Page with no ID.
        val initialPages = listOf(existingPage1, existingPage2)
        val insertPage = pageNoId

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Insert the new page
        val insertResult = pageDao.insertPage(insertPage)

        // Then: Verify that the new page was inserted with returned ID
        val allPages = pageDao.getAllPages()

        val finalPages = initialPages.plusElement(PageEntity(insertResult.toInt(), insertPage.imageUri, insertPage.state, insertPage.order, insertPage.bookId))

        assertThat(allPages).hasSize(finalPages.size)
        assertThat(allPages).containsExactlyElementsIn(finalPages)
    }

    ////////////////////////////////////////////////////////////////
    /// Get All Pages test cases:
    ///  1. Get all on empty Dataset -> Empty list
    ///  2. Get all on non empty Dataset -> List contains only inserted elements.

    /**
     * 1. Get all on empty Dataset -> Empty list
     */
    @Test
    fun getAllPages_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get all pages in empty dataset.
        val allPages = pageDao.getAllPages()

        // Then: Its an empty list.
        assertThat(allPages).isEmpty()
    }

    /**
     * 2. Get all on non empty Dataset -> List contains only inserted elements.
     */
    @Test
    fun getAllPages_whenDatabaseHasElements() = runTest {
        // Given: Database with elements.
        val initialPages = listOf(existingPage1, existingPage2, existingPage3)

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Get all pages
        val allPages = pageDao.getAllPages()

        // Then: List is the same than initial page
        assertThat(allPages).hasSize(initialPages.size)
        assertThat(allPages).containsExactlyElementsIn(initialPages)
    }

    ////////////////////////////////////////////////////////////////
    /// Get Page test cases:
    ///  1. Get on empty Dataset -> Gets null
    ///  2. Get on non empty Dataset with getting Page -> Gets page with getting ID
    ///  3. Get on non empty Dataset without getting Page -> Gets null

    /**
     * 1. Get on empty Dataset -> Gets null
     */
    @Test
    fun getPage_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get page in empty dataset.
        val getPage = pageDao.getPage(1)

        // Then: Its null.
        assertThat(getPage).isNull()
    }

    /**
     * 2. Get on non empty Dataset with getting Page -> Gets page with getting ID
     */
    @Test
    fun getPage_whenDatabaseHasElements_entityExists() = runTest {
        // Given: Database with elements.
        val initialPages = listOf(existingPage1, existingPage2, existingPage3)
        val pageToGet = initialPages.first()
        val pageIdToGet = pageToGet.pageId

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Get page that exists.
        val getPage = pageDao.getPage(pageIdToGet)

        // Then: Get page is same than inserted.
        assertThat(getPage).isNotNull()
        assertThat(getPage).isEqualTo(pageToGet)
    }

    /**
     * 3. Get on non empty Dataset without getting Page -> Gets null
     */
    @Test
    fun getPage_whenDatabaseHasElements_entityDoesNotExists() = runTest {
        // Given: Database with elements.
        val initialPages = listOf(existingPage1, existingPage2)
        val pageIdToGet = existingPage3.pageId

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Get page that does not exists.
        val getPage = pageDao.getPage(pageIdToGet)

        // Then: Gets null.
        assertThat(getPage).isNull()
    }

    ////////////////////////////////////////////////////////////////
    /// Get Page With Boxes test cases:
    ///  1. Get on empty Dataset -> Gets null
    ///  2. Get on non empty Dataset with getting Page without boxes -> Gets page with getting ID and empty list of boxes
    ///  3. Get on non empty Dataset with getting Page with boxes -> Gets page with getting ID and list of boxes
    ///  4. Get on non empty Dataset without getting Page -> Gets null

    /**
     * 1. Get on empty Dataset -> Gets null
     */
    @Test
    fun getPageWithBoxes_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get pages in empty dataset.
        val getPage = pageDao.getPageWithBoxes(1)

        // Then: Its null.
        assertThat(getPage).isNull()
    }

    /**
     * 2. Get on non empty Dataset with getting Page without boxes -> Gets page with getting ID and empty list of boxes
     */
    @Test
    fun getPageWithBoxes_whenDatabaseHasElements_pageExistsWithNoBoxes() = runTest {
        // Given: Database with pages but no boxes.
        val initialPages = listOf(existingPage1, existingPage2, existingPage3)
        val pageToGet = initialPages.first()
        val pageIdToGet = pageToGet.pageId

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Get page that exists.
        val getPage = pageDao.getPageWithBoxes(pageIdToGet)

        // Then: Get page is same than inserted and has no boxes.
        assertThat(getPage).isNotNull()
        assertThat(getPage!!.page).isEqualTo(pageToGet)
        assertThat(getPage.boxes).isEmpty()
    }

    /**
     * 3. Get on non empty Dataset with getting Page with boxes -> Gets page with getting ID and list of boxes
     */
    @Test
    fun getPageWithBoxes_whenDatabaseHasElements_pageExistsWithBoxes() = runTest {
        // Given: Database with a page with boxes.
        val initialPages = listOf(existingPage1, existingPage2, existingPage3)

        val pageToGet = initialPages.first()
        val pageIdToGet = pageToGet.pageId

        val pagesBoxes = listOf(
            BoxEntity(1, boxEntity.x, boxEntity.y,boxEntity.width, boxEntity.height, pageIdToGet),
            BoxEntity(2, boxEntity.x, boxEntity.y,boxEntity.width, boxEntity.height, pageIdToGet),
        )

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }
        pagesBoxes.forEach { boxDao.insertBox(it) }

        // When: Get page with boxes that exists and has boxes.
        val getPage = pageDao.getPageWithBoxes(pageIdToGet)

        // Then: Get page and boxes are same than inserted.
        assertThat(getPage).isNotNull()
        assertThat(getPage!!.page).isEqualTo(pageToGet)
        assertThat(getPage.boxes).isNotEmpty()
        assertThat(getPage.boxes).containsExactlyElementsIn(pagesBoxes)
    }

    /**
     * 4. Get on non empty Dataset without getting Page -> Gets null
     */
    @Test
    fun getPageWithBoxes_whenDatabaseHasElements_pageDoesNotExist() = runTest {
        // Given: Database with elements.
        val initialPages = listOf(existingPage1, existingPage2)
        val pageToGet = newPage3
        val pageIdToGet = pageToGet.pageId

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Get page that does not exist.
        val getPage = pageDao.getPageWithBoxes(pageIdToGet)

        // Then: Get page is null.
        assertThat(getPage).isNull()
    }

    ////////////////////////////////////////////////////////////////
    /// Update Page test cases:
    ///  1. Update on empty Dataset -> Result is 0 and dataset continues empty
    ///  2. Update on non empty Dataset with updating Page -> Result is 1 and dataset contains updated page
    ///  3. Update on non empty Dataset without updating Page -> Result is 0 and dataset remains unmodified

    /**
     * 1. Update on empty Dataset -> Result is 0 and dataset continues empty
     */
    @Test
    fun updatePage_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.
        val updatePageEntity = newPage1

        // When: Update a page that does not exist.
        val updateResult = pageDao.updatePage(updatePageEntity)

        // Then: affected rows is 0 and dataset continues empty.
        val allPages = pageDao.getAllPages()

        assertThat(updateResult).isEqualTo(0)
        assertThat(allPages).isEmpty()
    }

    /**
     * 2. Update on non empty Dataset with updating Page -> Result is 1 and dataset contains updated page
     */
    @Test
    fun updatePage_whenDatabaseHasElements_pageExists() = runTest {
        // Given: Dataset with one page.
        val initialPages = listOf(existingPage1)
        val updatePageEntity = newPage1

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Updating a page that exists.
        val updateResult = pageDao.updatePage(updatePageEntity)

        // Then: The page is updated with the new info and no more pages inserted.
        val allPages = pageDao.getAllPages()

        assertThat(updateResult).isEqualTo(1)
        assertThat(allPages).hasSize(1)
        assertThat(allPages).containsExactly(updatePageEntity)
        assertThat(allPages).doesNotContain(initialPages)
    }

    /**
     * 3. Update on non empty Dataset without updating Page -> Result is 0 and dataset remains unmodified
     */
    @Test
    fun updatePage_whenDatabaseHasElements_pageDoesNotExist() = runTest {
        // Given: Dataset with elements.
        val initialPages = listOf(existingPage1)
        val updatePageEntity = newPage2

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }


        // When: Update an element that does not exit.
        val updateResult = pageDao.updatePage(updatePageEntity)

        // Then: Affected rows is 0 and dataset remains unmodified.
        val allPages = pageDao.getAllPages()

        assertThat(updateResult).isEqualTo(0)
        assertThat(allPages).hasSize(1)
        assertThat(allPages).containsExactlyElementsIn(initialPages)
        assertThat(allPages).doesNotContain(updatePageEntity)
    }

    ////////////////////////////////////////////////////////////////
    /// Delete Page test cases:
    ///  1. Deleting on empty Dataset -> Result is 0 and dataset continues empty
    ///  2. Deleting on non empty Dataset with deleting Page -> Result is 1 and dataset removed deleting Page
    ///  3. Deleting on non empty Dataset with deleting Page with boxes -> Result is 1 and dataset removed deleting Page and its boxes
    ///  4. Deleting on non empty Dataset without deleting Page -> Result is 0 and dataset remains unmodified

    /**
     * 1. Deleting on empty Dataset -> Result is 0 and dataset continues empty
     */
    @Test
    fun deletePage_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.
        val pageIdToDelete = newPage1.pageId

        // When: Deleting page does not exist.
        val deleteResult = pageDao.deletePage(pageIdToDelete)

        // Then: Affected rows is 0 and dataset remains empty.
        val allPages = pageDao.getAllPages()

        assertThat(deleteResult).isEqualTo(0)
        assertThat(allPages).isEmpty()
    }

    /**
     * 2. Deleting on non empty Dataset with deleting Page -> Result is 1 and dataset removed deleting Page
     */
    @Test
    fun deletePage_whenDatabaseHasElements_pageExists() = runTest {
        // Given: Dataset with one element.
        val initialPages = listOf(existingPage1)
        val pageIdToDelete = existingPage1.pageId

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }

        // When: Delete a page that exists.
        val deleteResult = pageDao.deletePage(pageIdToDelete)

        // Then: Affected rows is 1 and dataset turns empty.
        val allPages = pageDao.getAllPages()

        assertThat(deleteResult).isEqualTo(1)
        assertThat(allPages).isEmpty()
    }

    /**
     * 3. Deleting on non empty Dataset with deleting Page with boxes -> Result is 1 and dataset removed deleting Page and its boxes
     */
    @Test
    fun deletePage_whenDatabaseHasElements_pageExistsWithBoxes() = runTest {
        // Given: Database with a page with boxes.
        val initialPages = listOf(existingPage1)
        val pageIdToDelete = initialPages.first().pageId

        val pagesBoxes = listOf(
            BoxEntity(1, boxEntity.x, boxEntity.y, boxEntity.width, boxEntity.height, pageIdToDelete),
            BoxEntity(2, boxEntity.x, boxEntity.y, boxEntity.width, boxEntity.height, pageIdToDelete),
        )

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }
        pagesBoxes.forEach { boxDao.insertBox(it) }

        assertThat(pageDao.getAllPages()).isNotEmpty()
        assertThat(boxDao.getAllBoxes()).isNotEmpty()

        // When: Delete existing page with boxes.
        val deleteResult = pageDao.deletePage(pageIdToDelete)

        // Then: Affected rows is 1 and page and box tables are empty

        assertThat(deleteResult).isEqualTo(1)
        assertThat(pageDao.getAllPages()).isEmpty()
        assertThat(boxDao.getAllBoxes()).isEmpty()
    }

    /**
     * 4. Deleting on non empty Dataset without deleting Page -> Result is 0 and dataset remains unmodified
     */
    @Test
    fun deletePage_whenDatabaseHasElements_pageDoesNotExist() = runTest {
        // Given: Dataset with elements
        val initialPages = listOf(existingPage1)
        val pageIdToDelete = newPage2.pageId

        bookDao.insertBook(existingBook)
        initialPages.forEach { pageDao.insertPage(it) }


        // When: Delete a page that does not exist
        val deleteResult = pageDao.deletePage(pageIdToDelete)

        // Then: Affected rows is 0 and dataset remains unmodified
        val allPages = pageDao.getAllPages()

        assertThat(deleteResult).isEqualTo(0)
        assertThat(allPages).hasSize(1)
        assertThat(allPages).containsExactlyElementsIn(initialPages)
    }
}