package com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.dao

import android.database.sqlite.SQLiteConstraintException
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.SmallTest
import com.google.common.truth.Truth.assertThat
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.AppDatabase
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.BookEntity
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.BoxEntity
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.PageEntity
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Assert.assertThrows
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
@SmallTest
class BoxDaoTest {
    private lateinit var database: AppDatabase
    private lateinit var bookDao: BookDao
    private lateinit var pageDao: PageDao
    private lateinit var boxDao: BoxDao

    private val existingBook = BookEntity(1, "ExistingBook1", "Existing Book 1", 0)
    private val existingPage = PageEntity(1, "ExistingPage1", false, 0, 1)

    private val existingBox1 = BoxEntity(1, 1, 1,1,1, 1)
    private val existingBox2 = BoxEntity(2, 2, 2,2,2, 1)
    private val existingBox3 = BoxEntity(3, 3, 3,3,3, 1)

    private val newBox1 = BoxEntity(1, 1,1,1,1, 1)
    private val newBox2 = BoxEntity(2, 2,2,2,2, 1)
    private val newBox3 = BoxEntity(3, 3,3,3,3, 1)

    private val boxNoId = BoxEntity(0, 1, 2,3, 4, 1)

    @Before
    fun setup() {
        database = Room.inMemoryDatabaseBuilder(
            ApplicationProvider.getApplicationContext(),
            AppDatabase::class.java
        ).allowMainThreadQueries().build()

        bookDao = database.bookDao()
        pageDao = database.pageDao()
        boxDao = database.boxDao()
    }

    @After
    fun teardown() {
        database.close()
    }


    ////////////////////////////////////////////////////////////////
    /// Insert Box test cases:
    ///  1. Insert on empty Dataset -> Trows Exception
    ///  2. Insert on non empty Dataset no collision -> Insert OK
    ///  3. Insert on non empty Dataset with collision -> Override
    ///  4. Insert on non empty Dataset with no ID Box -> Insert OK with autogenerated Key

    /**
     * 1. Insert on empty Dataset -> Trows Exception
     */
    @Test
    fun insertBox_whenDatabaseIsEmpty() = runTest {
        // Given: Empty database.
        val insertBox = newBox1

        // When: Insert a box -> exception.
        assertThrows(SQLiteConstraintException::class.java) {
            runBlocking{
                val insertResult = boxDao.insertBox(insertBox)
            }
        }

        // Then: Database remains empty.
        assertThat(boxDao.getAllBoxes()).isEmpty()
    }

    /**
     * 2. Insert on non empty Dataset no collision -> Insert OK
     */
    @Test
    fun insertBox_whenDatabaseHasElements_noCollisions() = runTest {
        // Given: Dataset with initial boxes.
        val initialBoxes = listOf(existingBox1, existingBox2)
        val insertBox = newBox3
        val finalBoxes = initialBoxes.plusElement(insertBox)

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }


        // When: Insert the new box.
        val insertResult = boxDao.insertBox(insertBox)

        // Then: Database contains previous boxes and new one.
        val allBoxes = boxDao.getAllBoxes()

        assertThat(insertResult).isEqualTo(insertBox.boxId)
        assertThat(allBoxes).hasSize(finalBoxes.size)
        assertThat(allBoxes).containsExactlyElementsIn(finalBoxes)
    }

    /**
     * 3. Insert on non empty Dataset with collision -> Override
     */
    @Test
    fun insertBox_whenDatabaseHasElements_withCollision() = runTest {
        // Given: Database with one element.
        val initialBox = existingBox1
        val insertBox = newBox1

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        boxDao.insertBox(initialBox)

        // When: Insert a box which ID already exists.
        val insertResult = boxDao.insertBox(insertBox)

        // Then: The previous box was replaced by the new one.
        val allBoxes = boxDao.getAllBoxes()

        assertThat(insertResult).isEqualTo(insertBox.boxId)
        assertThat(allBoxes).hasSize(1)
        assertThat(allBoxes).containsExactly(insertBox)
    }

    /**
     * 4. Insert on non empty Dataset with no ID Box -> Insert OK with autogenerated Key
     */
    @Test
    fun insertBox_noId_whenDatabaseHasElements() = runTest {
        // Given: Dataset with elements and Box with no ID.
        val initialBoxes = listOf(existingBox1, existingBox2)
        val insertBox = boxNoId

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }

        // When: Insert the new box
        val insertResult = boxDao.insertBox(insertBox)

        // Then: Verify that the new box was inserted with returned ID
        val allBoxes = boxDao.getAllBoxes()

        val finalBoxes = initialBoxes.plusElement(BoxEntity(insertResult.toInt(), insertBox.x, insertBox.y,insertBox.width, insertBox.height, insertBox.pageId))

        assertThat(allBoxes).hasSize(finalBoxes.size)
        assertThat(allBoxes).containsExactlyElementsIn(finalBoxes)
    }

    ////////////////////////////////////////////////////////////////
    /// Get All Boxes test cases:
    ///  1. Get all on empty Dataset -> Empty list
    ///  2. Get all on non empty Dataset -> List contains only inserted elements.

    /**
     * 1. Get all on empty Dataset -> Empty list
     */
    @Test
    fun getAllBoxes_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get all boxes in empty dataset.
        val allBoxes = boxDao.getAllBoxes()

        // Then: Its an empty list.
        assertThat(allBoxes).isEmpty()
    }

    /**
     * 2. Get all on non empty Dataset -> List contains only inserted elements.
     */
    @Test
    fun getAllBoxes_whenDatabaseHasElements() = runTest {
        // Given: Database with elements.
        val initialBoxes = listOf(existingBox1, existingBox2, existingBox3)

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }

        // When: Get all boxes
        val allBoxes = boxDao.getAllBoxes()

        // Then: List is the same than initial box
        assertThat(allBoxes).hasSize(initialBoxes.size)
        assertThat(allBoxes).containsExactlyElementsIn(initialBoxes)
    }

    ////////////////////////////////////////////////////////////////
    /// Get Box test cases:
    ///  1. Get on empty Dataset -> Gets null
    ///  2. Get on non empty Dataset with getting Box -> Gets box with getting ID
    ///  3. Get on non empty Dataset without getting Box -> Gets null

    /**
     * 1. Get on empty Dataset -> Gets null
     */
    @Test
    fun getBox_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get box in empty dataset.
        val getBox = boxDao.getBox(1)

        // Then: Its null.
        assertThat(getBox).isNull()
    }

    /**
     * 2. Get on non empty Dataset with getting Box -> Gets box with getting ID
     */
    @Test
    fun getBox_whenDatabaseHasElements_entityExists() = runTest {
        // Given: Database with elements.
        val initialBoxes = listOf(existingBox1, existingBox2, existingBox3)
        val boxToGet = initialBoxes.first()
        val boxIdToGet = boxToGet.boxId

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }

        // When: Get box that exists.
        val getBox = boxDao.getBox(boxIdToGet)

        // Then: Get box is same than inserted.
        assertThat(getBox).isNotNull()
        assertThat(getBox).isEqualTo(boxToGet)
    }

    /**
     * 3. Get on non empty Dataset without getting Box -> Gets null
     */
    @Test
    fun getBox_whenDatabaseHasElements_entityDoesNotExists() = runTest {
        // Given: Database with elements.
        val initialBoxes = listOf(existingBox1, existingBox2)
        val boxIdToGet = existingBox3.boxId

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }

        // When: Get box that does not exists.
        val getBox = boxDao.getBox(boxIdToGet)

        // Then: Gets null.
        assertThat(getBox).isNull()
    }

    ////////////////////////////////////////////////////////////////
    /// Update Box test cases:
    ///  1. Update on empty Dataset -> Result is 0 and dataset continues empty
    ///  2. Update on non empty Dataset with updating Box -> Result is 1 and dataset contains updated box
    ///  3. Update on non empty Dataset without updating Box -> Result is 0 and dataset remains unmodified

    /**
     * 1. Update on empty Dataset -> Result is 0 and dataset continues empty
     */
    @Test
    fun updateBox_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.
        val updateBoxEntity = newBox1

        // When: Update a box that does not exist.
        val updateResult = boxDao.updateBox(updateBoxEntity)

        // Then: affected rows is 0 and dataset continues empty.
        val allBoxes = boxDao.getAllBoxes()

        assertThat(updateResult).isEqualTo(0)
        assertThat(allBoxes).isEmpty()
    }

    /**
     * 2. Update on non empty Dataset with updating Box -> Result is 1 and dataset contains updated box
     */
    @Test
    fun updateBox_whenDatabaseHasElements_boxExists() = runTest {
        // Given: Dataset with one box.
        val initialBoxes = listOf(existingBox1)
        val updateBoxEntity = newBox1

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }

        // When: Updating a box that exists.
        val updateResult = boxDao.updateBox(updateBoxEntity)

        // Then: The box is updated with the new info and no more boxes inserted.
        val allBoxes = boxDao.getAllBoxes()

        assertThat(updateResult).isEqualTo(1)
        assertThat(allBoxes).hasSize(1)
        assertThat(allBoxes).containsExactly(updateBoxEntity)
        assertThat(allBoxes).doesNotContain(initialBoxes)
    }

    /**
     * 3. Update on non empty Dataset without updating Box -> Result is 0 and dataset remains unmodified
     */
    @Test
    fun updateBox_whenDatabaseHasElements_boxDoesNotExist() = runTest {
        // Given: Dataset with elements.
        val initialBoxes = listOf(existingBox1)
        val updateBoxEntity = newBox2

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }


        // When: Update an element that does not exit.
        val updateResult = boxDao.updateBox(updateBoxEntity)

        // Then: Affected rows is 0 and dataset remains unmodified.
        val allBoxes = boxDao.getAllBoxes()

        assertThat(updateResult).isEqualTo(0)
        assertThat(allBoxes).hasSize(1)
        assertThat(allBoxes).containsExactlyElementsIn(initialBoxes)
        assertThat(allBoxes).doesNotContain(updateBoxEntity)
    }

    ////////////////////////////////////////////////////////////////
    /// Delete Box test cases:
    ///  1. Deleting on empty Dataset -> Result is 0 and dataset continues empty
    ///  2. Deleting on non empty Dataset with deleting Box -> Result is 1 and dataset removed deleting Box
    ///  3. Deleting on non empty Dataset without deleting Box -> Result is 0 and dataset remains unmodified

    /**
     * 1. Deleting on empty Dataset -> Result is 0 and dataset continues empty
     */
    @Test
    fun deleteBox_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.
        val boxIdToDelete = newBox1.boxId

        // When: Deleting box does not exist.
        val deleteResult = boxDao.deleteBox(boxIdToDelete)

        // Then: Affected rows is 0 and dataset remains empty.
        val allBoxes = boxDao.getAllBoxes()

        assertThat(deleteResult).isEqualTo(0)
        assertThat(allBoxes).isEmpty()
    }

    /**
     * 2. Deleting on non empty Dataset with deleting Box -> Result is 1 and dataset removed deleting Box
     */
    @Test
    fun deleteBox_whenDatabaseHasElements_boxExists() = runTest {
        // Given: Dataset with one element.
        val initialBoxes = listOf(existingBox1)
        val boxIdToDelete = existingBox1.boxId

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }

        // When: Delete a box that exists.
        val deleteResult = boxDao.deleteBox(boxIdToDelete)

        // Then: Affected rows is 1 and dataset turns empty.
        val allBoxes = boxDao.getAllBoxes()

        assertThat(deleteResult).isEqualTo(1)
        assertThat(allBoxes).isEmpty()
    }

    /**
     * 3. Deleting on non empty Dataset without deleting Box -> Result is 0 and dataset remains unmodified
     */
    @Test
    fun deleteBox_whenDatabaseHasElements_boxDoesNotExist() = runTest {
        // Given: Dataset with elements
        val initialBoxes = listOf(existingBox1)
        val boxIdToDelete = newBox2.boxId

        bookDao.insertBook(existingBook)
        pageDao.insertPage(existingPage)
        initialBoxes.forEach { boxDao.insertBox(it) }


        // When: Delete a box that does not exist
        val deleteResult = boxDao.deleteBox(boxIdToDelete)

        // Then: Affected rows is 0 and dataset remains unmodified
        val allBoxes = boxDao.getAllBoxes()

        assertThat(deleteResult).isEqualTo(0)
        assertThat(allBoxes).hasSize(1)
        assertThat(allBoxes).containsExactlyElementsIn(initialBoxes)
    }
}