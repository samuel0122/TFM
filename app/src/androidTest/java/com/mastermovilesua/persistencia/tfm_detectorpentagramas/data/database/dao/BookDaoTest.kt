package com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.dao

import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.SmallTest
import com.google.common.truth.Truth.assertThat
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.AppDatabase
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.BookEntity
import com.mastermovilesua.persistencia.tfm_detectorpentagramas.data.database.entities.PageEntity
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
@SmallTest
class BookDaoTest {

    private lateinit var database: AppDatabase
    private lateinit var bookDao: BookDao
    private lateinit var pageDao: PageDao

    private val existingBook1 = BookEntity(1, "ExistingBook1", "Existing Book 1", 0)
    private val existingBook2 = BookEntity(2, "ExistingBook2", "Existing Book 2", 0)
    private val existingBook3 = BookEntity(3, "ExistingBook3", "Existing Book 3", 0)

    private val newBook1 = BookEntity(1, "NewBook1", "New Book 1", 0)
    private val newBook2 = BookEntity(2, "NewBook2", "New Book 2", 0)
    private val newBook3 = BookEntity(3, "NewBook3", "New Book 3", 0)

    private val bookNoId = BookEntity(0, "NoIdBook", "No ID Book", 0)

    private val pageEntity = PageEntity(0, "imageURI", 0, 0, 0)

    @Before
    fun setup() {
        database = Room.inMemoryDatabaseBuilder(
            ApplicationProvider.getApplicationContext(),
            AppDatabase::class.java
        ).allowMainThreadQueries().build()

        bookDao = database.bookDao()
        pageDao = database.pageDao()
    }

    @After
    fun teardown() {
        database.close()
    }

    ////////////////////////////////////////////////////////////////
    /// Insert Book test cases:
    ///  1. Insert on empty Dataset -> Insert OK
    ///  2. Insert on non empty Dataset no collision -> Insert OK
    ///  3. Insert on non empty Dataset with collision -> Override
    ///  4. Insert on non empty Dataset with no ID Book -> Insert OK with autogenerated Key

    /**
     * 1. Insert on empty Dataset -> Insert OK
     */
    @Test
    fun insertBook_whenDatabaseIsEmpty() = runTest {
        // Given: Empty database.
        val insertBook = newBook1

        // When: Insert a book.
        val insertResult = bookDao.insertBook(insertBook)

        // Then: Database only contains inserted book.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(insertResult).isEqualTo(insertBook.bookId)
        assertThat(allBooks).hasSize(1)
        assertThat(allBooks).containsExactly(insertBook)
    }

    /**
     * 2. Insert on non empty Dataset no collision -> Insert OK
     */
    @Test
    fun insertBook_whenDatabaseHasElements_noCollisions() = runTest {
        // Given: Dataset with initial books.
        val initialBooks = listOf(existingBook1, existingBook2)
        val insertBook = newBook3
        val finalBooks = initialBooks.plusElement(insertBook)

        initialBooks.forEach { bookDao.insertBook(it) }


        // When: Insert the new book.
        val insertResult = bookDao.insertBook(insertBook)

        // Then: Database contains previous books and new one.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(insertResult).isEqualTo(insertBook.bookId)
        assertThat(allBooks).hasSize(finalBooks.size)
        assertThat(allBooks).containsExactlyElementsIn(finalBooks)
    }

    /**
     * 3. Insert on non empty Dataset with collision -> Override
     */
    @Test
    fun insertBook_whenDatabaseHasElements_withCollision() = runTest {
        // Given: Database with one element.
        val initialBook = existingBook1
        val insertBook = newBook1

        bookDao.insertBook(initialBook)

        // When: Insert a book which ID already exists.
        val insertResult = bookDao.insertBook(insertBook)

        // Then: The previous book was replaced by the new one.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(insertResult).isEqualTo(insertBook.bookId)
        assertThat(allBooks).hasSize(1)
        assertThat(allBooks).containsExactly(insertBook)
    }

    /**
     * 4. Insert on non empty Dataset with no ID Book -> Insert OK with autogenerated Key
     */
    @Test
    fun insertBook_noId_whenDatabaseHasElements() = runTest {
        // Given: Dataset with elements and Book with no ID.
        val initialBooks = listOf(existingBook1, existingBook2)
        val insertBook = bookNoId

        initialBooks.forEach { bookDao.insertBook(it) }

        // When: Insert the new book
        val insertResult = bookDao.insertBook(insertBook)

        // Then: Verify that the new book was inserted with returned ID
        val allBooks = bookDao.getAllBooks().first()

        val finalBooks = initialBooks.plusElement(BookEntity(insertResult.toInt(), insertBook.title, insertBook.description, insertBook.dataset))

        assertThat(allBooks).hasSize(finalBooks.size)
        assertThat(allBooks).containsExactlyElementsIn(finalBooks)
    }

    ////////////////////////////////////////////////////////////////
    /// Get All Books test cases:
    ///  1. Get all on empty Dataset -> Empty list
    ///  2. Get all on non empty Dataset -> List contains only inserted elements.

    /**
     * 1. Get all on empty Dataset -> Empty list
     */
    @Test
    fun getAllBooks_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get all books in empty dataset.
        val allBooks = bookDao.getAllBooks().first()

        // Then: Its an empty list.
        assertThat(allBooks).isEmpty()
    }

    /**
     * 2. Get all on non empty Dataset -> List contains only inserted elements.
     */
    @Test
    fun getAllBooks_whenDatabaseHasElements() = runTest {
        // Given: Database with elements.
        val initialBooks = listOf(existingBook1, existingBook2, existingBook3)

        initialBooks.forEach { bookDao.insertBook(it) }

        // When: Get all books
        val allBooks = bookDao.getAllBooks().first()

        // Then: List is the same than initial book
        assertThat(allBooks).hasSize(initialBooks.size)
        assertThat(allBooks).containsExactlyElementsIn(initialBooks)
    }

    ////////////////////////////////////////////////////////////////
    /// Get Book test cases:
    ///  1. Get on empty Dataset -> Gets null
    ///  2. Get on non empty Dataset with getting Book -> Gets book with getting ID
    ///  3. Get on non empty Dataset without getting Book -> Gets null

    /**
     * 1. Get on empty Dataset -> Gets null
     */
    @Test
    fun getBook_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get book in empty dataset.
        val getBook = bookDao.getBook(1)

        // Then: Its null.
        assertThat(getBook).isNull()
    }

    /**
     * 2. Get on non empty Dataset with getting Book -> Gets book with getting ID
     */
    @Test
    fun getBook_whenDatabaseHasElements_entityExists() = runTest {
        // Given: Database with elements.
        val initialBooks = listOf(existingBook1, existingBook2, existingBook3)
        val bookToGet = initialBooks.first()
        val bookIdToGet = bookToGet.bookId

        initialBooks.forEach { bookDao.insertBook(it) }

        // When: Get book that exists.
        val getBook = bookDao.getBook(bookIdToGet)

        // Then: Get book is same than inserted.
        assertThat(getBook).isNotNull()
        assertThat(getBook).isEqualTo(bookToGet)
    }

    /**
     * 3. Get on non empty Dataset without getting Book -> Gets null
     */
    @Test
    fun getBook_whenDatabaseHasElements_entityDoesNotExists() = runTest {
        // Given: Database with elements.
        val initialBooks = listOf(existingBook1, existingBook2)
        val bookIdToGet = existingBook3.bookId

        initialBooks.forEach { bookDao.insertBook(it) }

        // When: Get book that does not exists.
        val getBook = bookDao.getBook(bookIdToGet)

        // Then: Gets null.
        assertThat(getBook).isNull()
    }

    ////////////////////////////////////////////////////////////////
    /// Get Book With Pages test cases:
    ///  1. Get on empty Dataset -> Gets null
    ///  2. Get on non empty Dataset with getting Book without pages -> Gets book with getting ID and empty list of pages
    ///  3. Get on non empty Dataset with getting Book with pages -> Gets book with getting ID and list of pages
    ///  4. Get on non empty Dataset without getting Book -> Gets null

    /**
     * 1. Get on empty Dataset -> Gets null
     */
    @Test
    fun getBookWithPages_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.

        // When: Get books in empty dataset.
        val getBook = bookDao.getBookWithPages(1).first()

        // Then: Its null.
        assertThat(getBook).isNull()
    }

    /**
     * 2. Get on non empty Dataset with getting Book without pages -> Gets book with getting ID and empty list of pages
     */
    @Test
    fun getBookWithPages_whenDatabaseHasElements_bookExistsWithNoPages() = runTest {
        // Given: Database with books but no pages.
        val initialBooks = listOf(existingBook1, existingBook2, existingBook3)
        val bookToGet = initialBooks.first()
        val bookIdToGet = bookToGet.bookId

        initialBooks.forEach { bookDao.insertBook(it) }

        // When: Get book that exists.
        val getBook = bookDao.getBookWithPages(bookIdToGet).first()

        // Then: Get book is same than inserted and has no pages.
        assertThat(getBook).isNotNull()
        assertThat(getBook!!.book).isEqualTo(bookToGet)
        assertThat(getBook.pages).isEmpty()
    }

    /**
     * 3. Get on non empty Dataset with getting Book with pages -> Gets book with getting ID and list of pages
     */
    @Test
    fun getBookWithPages_whenDatabaseHasElements_bookExistsWithPages() = runTest {
        // Given: Database with a book with pages.
        val initialBooks = listOf(existingBook1, existingBook2, existingBook3)

        val bookToGet = initialBooks.first()
        val bookIdToGet = bookToGet.bookId

        val booksPages = listOf(
            PageEntity(1, pageEntity.imageUri, pageEntity.state, pageEntity.order, bookIdToGet),
            PageEntity(2, pageEntity.imageUri, pageEntity.state, pageEntity.order, bookIdToGet),
        )

        initialBooks.forEach { bookDao.insertBook(it) }
        booksPages.forEach { pageDao.insertPage(it) }

        // When: Get book with pages that exists and has pages.
        val getBook = bookDao.getBookWithPages(bookIdToGet).first()

        // Then: Get book and pages are same than inserted.
        assertThat(getBook).isNotNull()
        assertThat(getBook!!.book).isEqualTo(bookToGet)
        assertThat(getBook.pages).isNotEmpty()
        assertThat(getBook.pages).containsExactlyElementsIn(booksPages)
    }

    /**
     * 4. Get on non empty Dataset without getting Book -> Gets null
     */
    @Test
    fun getBookWithPages_whenDatabaseHasElements_bookDoesNotExist() = runTest {
        // Given: Database with elements.
        val initialBooks = listOf(existingBook1, existingBook2)
        val bookToGet = newBook3
        val bookIdToGet = bookToGet.bookId

        initialBooks.forEach { bookDao.insertBook(it) }

        // When: Get book that does not exist.
        val getBook = bookDao.getBookWithPages(bookIdToGet).first()

        // Then: Get book is null.
        assertThat(getBook).isNull()
    }

    ////////////////////////////////////////////////////////////////
    /// Update Book test cases:
    ///  1. Update on empty Dataset -> Result is 0 and dataset continues empty
    ///  2. Update on non empty Dataset with updating Book -> Result is 1 and dataset contains updated book
    ///  3. Update on non empty Dataset without updating Book -> Result is 0 and dataset remains unmodified

    /**
     * 1. Update on empty Dataset -> Result is 0 and dataset continues empty
     */
    @Test
    fun updateBook_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.
        val updateBookEntity = newBook1

        // When: Update a book that does not exist.
        val updateResult = bookDao.updateBook(updateBookEntity)

        // Then: affected rows is 0 and dataset continues empty.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(updateResult).isEqualTo(0)
        assertThat(allBooks).isEmpty()
    }

    /**
     * 2. Update on non empty Dataset with updating Book -> Result is 1 and dataset contains updated book
     */
    @Test
    fun updateBook_whenDatabaseHasElements_bookExists() = runTest {
        // Given: Dataset with one book.
        val initialBooks = listOf(existingBook1)
        val updateBookEntity = newBook1

        initialBooks.forEach { bookDao.insertBook(it) }

        // When: Updating a book that exists.
        val updateResult = bookDao.updateBook(updateBookEntity)

        // Then: The book is updated with the new info and no more books inserted.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(updateResult).isEqualTo(1)
        assertThat(allBooks).hasSize(1)
        assertThat(allBooks).containsExactly(updateBookEntity)
        assertThat(allBooks).doesNotContain(initialBooks)
    }

    /**
     * 3. Update on non empty Dataset without updating Book -> Result is 0 and dataset remains unmodified
     */
    @Test
    fun updateBook_whenDatabaseHasElements_bookDoesNotExist() = runTest {
        // Given: Dataset with elements.
        val initialBooks = listOf(existingBook1)
        initialBooks.forEach { bookDao.insertBook(it) }

        val updateBookEntity = newBook2

        // When: Update an element that does not exit.
        val updateResult = bookDao.updateBook(updateBookEntity)

        // Then: Affected rows is 0 and dataset remains unmodified.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(updateResult).isEqualTo(0)
        assertThat(allBooks).hasSize(1)
        assertThat(allBooks).containsExactlyElementsIn(initialBooks)
        assertThat(allBooks).doesNotContain(updateBookEntity)
    }

    ////////////////////////////////////////////////////////////////
    /// Delete Book test cases:
    ///  1. Deleting on empty Dataset -> Result is 0 and dataset continues empty
    ///  2. Deleting on non empty Dataset with deleting Book -> Result is 1 and dataset removed deleting Book
    ///  3. Deleting on non empty Dataset with deleting Book with pages -> Result is 1 and dataset removed deleting Book and its pages
    ///  4. Deleting on non empty Dataset without deleting Book -> Result is 0 and dataset remains unmodified

    /**
     * 1. Deleting on empty Dataset -> Result is 0 and dataset continues empty
     */
    @Test
    fun deleteBook_whenDatabaseIsEmpty() = runTest {
        // Given: Empty dataset.
        val bookIdToDelete = newBook1.bookId

        // When: Deleting book does not exist.
        val deleteResult = bookDao.deleteBook(bookIdToDelete)

        // Then: Affected rows is 0 and dataset remains empty.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(deleteResult).isEqualTo(0)
        assertThat(allBooks).isEmpty()
    }

    /**
     * 2. Deleting on non empty Dataset with deleting Book -> Result is 1 and dataset removed deleting Book
     */
    @Test
    fun deleteBook_whenDatabaseHasElements_bookExists() = runTest {
        // Given: Dataset with one element.
        val initialBooks = listOf(existingBook1)
        initialBooks.forEach { bookDao.insertBook(it) }

        val bookIdToDelete = existingBook1.bookId

        // When: Delete a book that exists.
        val deleteResult = bookDao.deleteBook(bookIdToDelete)

        // Then: Affected rows is 1 and dataset turns empty.
        val allBooks = bookDao.getAllBooks().first()

        assertThat(deleteResult).isEqualTo(1)
        assertThat(allBooks).isEmpty()
    }

    /**
     * 3. Deleting on non empty Dataset with deleting Book with pages -> Result is 1 and dataset removed deleting Book and its pages
     */
    @Test
    fun deleteBook_whenDatabaseHasElements_bookExistsWithPages() = runTest {
        // Given: Database with a book with pages.
        val initialBooks = listOf(existingBook1)
        val bookIdToDelete = initialBooks.first().bookId

        val booksPages = listOf(
            PageEntity(1, pageEntity.imageUri, pageEntity.state, pageEntity.order, bookIdToDelete),
            PageEntity(2, pageEntity.imageUri, pageEntity.state, pageEntity.order, bookIdToDelete),
        )

        initialBooks.forEach { bookDao.insertBook(it) }
        booksPages.forEach { pageDao.insertPage(it) }

        assertThat(bookDao.getAllBooks().first()).isNotEmpty()
        assertThat(pageDao.getAllPages()).isNotEmpty()

        // When: Delete existing book with pages.
        val deleteResult = bookDao.deleteBook(bookIdToDelete)

        // Then: Affected rows is 1 and book and page tables are empty

        assertThat(deleteResult).isEqualTo(1)
        assertThat(bookDao.getAllBooks().first()).isEmpty()
        assertThat(pageDao.getAllPages()).isEmpty()
    }

    /**
     * 4. Deleting on non empty Dataset without deleting Book -> Result is 0 and dataset remains unmodified
     */
    @Test
    fun deleteBook_whenDatabaseHasElements_bookDoesNotExist() = runTest {
        // Given: Dataset with elements
        val initialBooks = listOf(existingBook1)
        val bookIdToDelete = newBook2.bookId

        initialBooks.forEach { bookDao.insertBook(it) }


        // When: Delete a book that does not exist
        val deleteResult = bookDao.deleteBook(bookIdToDelete)

        // Then: Affected rows is 0 and dataset remains unmodified
        val allBooks = bookDao.getAllBooks().first()

        assertThat(deleteResult).isEqualTo(0)
        assertThat(allBooks).hasSize(1)
        assertThat(allBooks).containsExactlyElementsIn(initialBooks)
    }
}